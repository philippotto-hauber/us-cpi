summarise(change_series = ratio_of_index(value, date, d_base, d)) %>%
mutate(new_weight = change_series * weight_Dec,
new_weight_normalized = new_weight / change_all[1,1]) -> df_out
View(df_out)
View(df_out)
df_weights <- data.frame()
# function to calculate ratio of index
ratio_of_index <- function(value, date, date1, date2)
return(value[which(date == date2)] / value[which(date == date1)])
for (d in seq(min(df$date), max(df$date), by = "month"))
{
d_base <- make_date(year = year(d) - 1, month = 12)
df_tmp <- merge(df, filter(df_weights_Dec, year == year(d_base)), by = "name")
df_tmp %>%
filter(name == "All items") %>%
summarise(change_all = ratio_of_index(value, date, d_base, d)) %>%
select(change_all) -> change_all
df_tmp %>%
filter(name != "All items") %>%
group_by(name, weight_Dec) %>%
summarise(change_series = ratio_of_index(value, date, d_base, d)) %>%
mutate(new_weight = change_series * weight_Dec,
new_weight_normalized = new_weight / change_all[1,1]) %>%
select(name, weight = new_weight_normalized) %>%
mutate(date = d + months(1)) %>%
rbind(df_weights)
}
df_weights <- data.frame()
# function to calculate ratio of index
ratio_of_index <- function(value, date, date1, date2)
return(value[which(date == date2)] / value[which(date == date1)])
dates <- seq(min(df$date), max(df$date), by = "month")
for (ind_d in seq(1, length(dates)))
{
d <- dates[d]
d_base <- make_date(year = year(d) - 1, month = 12)
df_tmp <- merge(df, filter(df_weights_Dec, year == year(d_base)), by = "name")
df_tmp %>%
filter(name == "All items") %>%
summarise(change_all = ratio_of_index(value, date, d_base, d)) %>%
select(change_all) -> change_all
df_tmp %>%
filter(name != "All items") %>%
group_by(name, weight_Dec) %>%
summarise(change_series = ratio_of_index(value, date, d_base, d)) %>%
mutate(new_weight = change_series * weight_Dec,
new_weight_normalized = new_weight / change_all[1,1]) %>%
select(name, weight = new_weight_normalized) %>%
mutate(date = d + months(1)) %>%
rbind(df_weights)
}
df_weights <- data.frame()
# function to calculate ratio of index
ratio_of_index <- function(value, date, date1, date2)
return(value[which(date == date2)] / value[which(date == date1)])
dates <- seq(min(df$date), max(df$date), by = "month")
for (ind_d in seq(1, length(dates)))
{
d <- dates[d]
d_base <- make_date(year = year(d) - 1, month = 12)
df_tmp <- merge(df, filter(df_weights_Dec, year == year(d_base)), by = "name")
df_tmp %>%
filter(name == "All items") %>%
summarise(change_all = ratio_of_index(value, date, d_base, d)) %>%
select(change_all) -> change_all
df_tmp %>%
filter(name != "All items") %>%
group_by(name, weight_Dec) %>%
summarise(change_series = ratio_of_index(value, date, d_base, d)) %>%
mutate(new_weight = change_series * weight_Dec,
new_weight_normalized = new_weight / change_all[1,1]) %>%
ungroup() %>%
select(name, weight = new_weight_normalized) %>%
mutate(date = d + months(1)) %>%
rbind(df_weights)
}
View(df_weights)
df_weights <- data.frame()
# function to calculate ratio of index
ratio_of_index <- function(value, date, date1, date2)
return(value[which(date == date2)] / value[which(date == date1)])
dates <- seq(min(df$date), max(df$date), by = "month")
for (ind_d in seq(1, length(dates)))
{
d <- dates[d]
d_base <- make_date(year = year(d) - 1, month = 12)
df_tmp <- merge(df, filter(df_weights_Dec, year == year(d_base)), by = "name")
df_tmp %>%
filter(name == "All items") %>%
summarise(change_all = ratio_of_index(value, date, d_base, d)) %>%
select(change_all) -> change_all
df_tmp %>%
filter(name != "All items") %>%
group_by(name, weight_Dec) %>%
summarise(change_series = ratio_of_index(value, date, d_base, d)) %>%
mutate(new_weight = change_series * weight_Dec,
new_weight_normalized = new_weight / change_all[1,1]) %>%
ungroup() %>%
select(name, weight = new_weight_normalized) %>%
mutate(date = d + months(1)) %>%
rbind(df_weights) -> df_weights
}
df_weights <- data.frame()
# function to calculate ratio of index
ratio_of_index <- function(value, date, date1, date2)
return(value[which(date == date2)] / value[which(date == date1)])
dates <- seq(min(df$date), max(df$date), by = "month")
for (ind_d in seq(1, length(dates)))
{
d <- dates[d]
d_base <- make_date(year = year(d) - 1, month = 12)
df_tmp <- merge(df, filter(df_weights_Dec, year == year(d_base)), by = "name")
df_tmp %>%
filter(name == "All items") %>%
summarise(change_all = ratio_of_index(value, date, d_base, d)) %>%
select(change_all) -> change_all
df_tmp %>%
filter(name != "All items") %>%
group_by(name, weight_Dec) %>%
summarise(change_series = ratio_of_index(value, date, d_base, d)) %>%
mutate(new_weight = change_series * weight_Dec,
new_weight_normalized = new_weight / change_all[1,1]) %>%
ungroup() %>%
select(name, weight = new_weight_normalized) %>%
mutate(date = d + months(1)) %>%
rbind(df_weights) -> df_weights
}
View(df_weights)
df_weights <- data.frame()
# function to calculate ratio of index
ratio_of_index <- function(value, date, date1, date2)
return(value[which(date == date2)] / value[which(date == date1)])
dates <- seq(min(df$date), max(df$date), by = "month")
for (ind_d in seq(1, length(dates)))
{
d <- dates[ind_d]
d_base <- make_date(year = year(d) - 1, month = 12)
df_tmp <- merge(df, filter(df_weights_Dec, year == year(d_base)), by = "name")
df_tmp %>%
filter(name == "All items") %>%
summarise(change_all = ratio_of_index(value, date, d_base, d)) %>%
select(change_all) -> change_all
df_tmp %>%
filter(name != "All items") %>%
group_by(name, weight_Dec) %>%
summarise(change_series = ratio_of_index(value, date, d_base, d)) %>%
mutate(new_weight = change_series * weight_Dec,
new_weight_normalized = new_weight / change_all[1,1]) %>%
ungroup() %>%
select(name, weight = new_weight_normalized) %>%
mutate(date = d + months(1)) %>%
rbind(df_weights) -> df_weights
}
View(df_weights)
View(df_weights)
filter(df_weights, name == "Bread", date == "2021-04")
filter(df_weights, name == "Bread", date == "2021-04")
str(df_weights)
filter(df_weights, name == "Bread", date == "2021-04-01")
filter(df_weights, name == "Baby food", date == "2021-04-01")
filter(df_weights, name == "Car and truck rental", date == "2021-04-01")
filter(df_weights, name == "Airline fares", date == "2021-04-01")
filter(df_weights, name == "Funeral expenses", date == "2021-04-01")
filter(df_weights, name == "Personal care services", date == "2021-04-01")
View(df_weights)
warnings()
View(df_weights)
url <- "https://www.bls.gov/cpi/tables/supplemental-files/news-release-table2-202104.xlsx"
fn <- "cpi_weights.xlsx"
download.file(url = url , destfile = fn, mode = "wb")
raw_table2_apr2021 <- read_excel(path = fn)
file.remove(fn)
df_categories <- transform_raw_weights(raw_table2_apr2021)
df_categories$category <- "Goods"
start_food <- which(df_categories$name == "Food")
end_food <- which(df_categories$name == "Other food away from home")
df_categories$category[seq(start_food, end_food)] <- "Food"
start_energy <- which(df_categories$name == "Energy")
end_energy <- which(df_categories$name == "Utility (piped) gas service")
df_categories$category[seq(start_energy, end_energy)] <- "Energy"
start_services <- which(df_categories$name == "Services less energy services")
end_services <- which(df_categories$name == "Financial services")
df_categories$category[seq(start_services, end_services)] <- "Services"
df_categories$category[df_categories$name == "All items"] <- "Total"
df_categories$category[df_categories$name == "All items less food and energy"] <- "Total ex energy and food"
View(df_categories)
str(df_categories)
str(df)
unique(df$name)
rm(list = ls())
library(dplyr, warn.conflicts = FALSE)
library(tidyr)
library(readxl)
library(stringr)
library(lubridate)
library(ggplot2)
library(ggsci)
options(dplyr.summarise.inform = FALSE) # turn off annoying summarise warning!
raw_dat <- read.table("https://download.bls.gov/pub/time.series/cu/cu.data.0.Current", sep="\t", header=TRUE)
df_series <- filter(raw_dat, year >= 2020)
df_series_backup <- df_series
rm(raw_dat)
df_series %>%
separate(period, into = c("tmp", "month"), sep = 1) %>%
filter(tmp == "M") %>%
select(-tmp, -footnote_codes) %>%
mutate(month = as.numeric(month),
date = make_date(year = year, month = month)) %>%
select(-year, -month) -> df_series
df_series %>%
separate(series_id,
into = c("tmp", "sa", "tmp2", "area", "series"),
sep = c(2,3,4,8)
) %>%
filter(area == "0000",
sa == "U") %>%
mutate(series = str_trim(series)) %>%
select(-tmp, -tmp2, -area, -sa) %>%
drop_na() -> df_series
raw_names <- read.table(file = "https://download.bls.gov/pub/time.series/cu/cu.item", sep = "\t", header=T, stringsAsFactors = F, quote = "")
df_names <- select(raw_names, item_code, item_name, display_level)
rm(raw_names)
df <- merge(df_series, df_names, by.x = "series", by.y = "item_code")
df <- rename(df, name = item_name)
transform_raw_weights <- function(raw_data)
{
df <- raw_data[seq(6, nrow(raw_data)), seq(1, 3)]
names(df) <- c("level", "name", "weight")
df %>%
mutate(level = factor(as.integer(level)),
weight = as.numeric(weight),
name = sapply(name, gsub, pattern = "\\(.\\)", replacement = ""),
name = sapply(name, gsub, pattern = "\\(..\\)", replacement = "")) %>%
filter(!is.na(weight)) -> df
return(df)
}
url <- "https://www.bls.gov/cpi/tables/supplemental-files/news-release-table2-202101.xlsx"
fn <- "cpi_weights.xlsx"
download.file(url = url , destfile = fn, mode = "wb")
raw_weights <- read_excel(path = fn)
file.remove(fn)
raw_weights %>%
transform_raw_weights() %>%
mutate(year = "2020") %>%
rename(weight_Dec = weight) %>%
select(-level)-> df_weights_Dec
url <- "https://www.bls.gov/cpi/tables/supplemental-files/news-release-table2-202001.xlsx"
fn <- "cpi_weights.xlsx"
download.file(url = url , destfile = fn, mode = "wb")
raw_weights <- read_excel(path = fn)
file.remove(fn)
raw_weights %>%
transform_raw_weights() %>%
mutate(year = "2019") %>%
rename(weight_Dec = weight) %>%
select(-level) %>%
rbind(df_weights_Dec) -> df_weights_Dec
df_weights <- data.frame()
# function to calculate ratio of index
ratio_of_index <- function(value, date, date1, date2)
return(value[which(date == date2)] / value[which(date == date1)])
dates <- seq(min(df$date), max(df$date), by = "month")
for (ind_d in seq(1, length(dates)))
{
d <- dates[ind_d]
d_base <- make_date(year = year(d) - 1, month = 12)
df_tmp <- merge(df, filter(df_weights_Dec, year == year(d_base)), by = "name")
df_tmp %>%
filter(name == "All items") %>%
summarise(change_all = ratio_of_index(value, date, d_base, d)) %>%
select(change_all) -> change_all
df_tmp %>%
filter(name != "All items") %>%
group_by(name, weight_Dec) %>%
summarise(change_series = ratio_of_index(value, date, d_base, d)) %>%
mutate(new_weight = change_series * weight_Dec,
new_weight_normalized = new_weight / change_all[1,1]) %>%
ungroup() %>%
select(name, weight = new_weight_normalized) %>%
mutate(date = d + months(1)) %>%
rbind(df_weights) -> df_weights
}
df <- merge(df, df_weights, by = c("name", "date"))
url <- "https://www.bls.gov/cpi/tables/supplemental-files/news-release-table2-202104.xlsx"
fn <- "cpi_weights.xlsx"
download.file(url = url , destfile = fn, mode = "wb")
raw_table2_apr2021 <- read_excel(path = fn)
file.remove(fn)
raw_table2_apr2021 %>%
transform_raw_weights() %>%
select(-weight) -> df_categories
df_categories$category <- "Goods"
start_food <- which(df_categories$name == "Food")
end_food <- which(df_categories$name == "Other food away from home")
df_categories$category[seq(start_food, end_food)] <- "Food"
start_energy <- which(df_categories$name == "Energy")
end_energy <- which(df_categories$name == "Utility (piped) gas service")
df_categories$category[seq(start_energy, end_energy)] <- "Energy"
start_services <- which(df_categories$name == "Services less energy services")
end_services <- which(df_categories$name == "Financial services")
df_categories$category[seq(start_services, end_services)] <- "Services"
df_categories$category[df_categories$name == "All items"] <- "Total"
df_categories$category[df_categories$name == "All items less food and energy"] <- "Total ex energy and food"
df <- merge(df, df_categories, by = "name")
df <- select(df, date, series, name, value, weight, category, level)
growth_rate <- function(x, dates, date1, date2)
#calculate growth rate of the CPI index between y1m1 and y2m2
{
ind1 <- which(dates == date1)
ind2 <- which(dates == date2)
return(x[ind2] / x[ind1] * 100 - 100)
}
rebase_index <- function(x, dates, date0)
# rebase index to 100 in y0m0
{
ind0 <- which(dates == date0)
return(x / x[ind0] * 100)
}
df %>%
filter(level == 3) %>%
group_by(name, weight, category) %>%
summarise(mm_apr21 = round(growth_rate(value, date, "2021-03-01", "2021-04-01"), digits = 2)
) %>%
mutate(mm_apr21_weighted = mm_apr21 * weight / 100) %>%
pivot_longer(cols = c("mm_apr21", "mm_apr21_weighted"), names_to = "variable", values_to = "value") -> df_plot
ggplot(df_plot)+
geom_histogram(aes(x = value), bins = 100, fill = "steelblue")+
facet_wrap(~variable, nrow = 2, scales = "free_x")
View(df)
df %>%
filter(level == 3) %>%
group_by(name, weight, category) %>%
summarise(mm_apr21 = round(growth_rate(value, date, "2021-03-01", "2021-04-01"), digits = 2)
) -> tmp
View(df)
str(df)
df %>%
filter(level == 3)
df %>%
filter(level == 3) %>%
group_by(name, weight, category) %>%
summarise(mm_apr21 = round(growth_rate(value, date, as_date("2021-03-01"), as_date("2021-04-01")), digits = 2)
) -> tmp %>%
mutate(mm_apr21_weighted = mm_apr21 * weight / 100) %>%
pivot_longer(cols = c("mm_apr21", "mm_apr21_weighted"), names_to = "variable", values_to = "value") -> df_plot
df %>%
filter(level == 3) %>%
group_by(name, weight, category) %>%
summarise(mm_apr21 = round(growth_rate(value, date, as_date("2021-03-01"), as_date("2021-04-01")), digits = 2)
) %>%
mutate(mm_apr21_weighted = mm_apr21 * weight / 100) %>%
pivot_longer(cols = c("mm_apr21", "mm_apr21_weighted"), names_to = "variable", values_to = "value") -> df_plot
ggplot(df_plot)+
geom_histogram(aes(x = value), bins = 100, fill = "steelblue")+
facet_wrap(~variable, nrow = 2, scales = "free_x")
df %>%
filter(level == 3) %>%
group_by(name, weight, category) %>%
summarise(mm_apr21 = round(growth_rate(value, date, as_date("2021-03-01"), as_date("2021-04-01")), digits = 2)
) -> tmp
View(df)
str(df)
df_tmp <- filter(df, name == "All items")
View(df)
View(df_categories)
unique(df$name)
View(df_weights)
df_tmp <- filter(df, name == "Admissions")
df_tmp
rm(list = ls())
library(dplyr, warn.conflicts = FALSE)
library(tidyr)
library(readxl)
library(stringr)
library(lubridate)
library(ggplot2)
library(ggsci)
options(dplyr.summarise.inform = FALSE) # turn off annoying summarise warning!
raw_dat <- read.table("https://download.bls.gov/pub/time.series/cu/cu.data.0.Current", sep="\t", header=TRUE)
df_series <- filter(raw_dat, year >= 2020)
df_series_backup <- df_series
rm(raw_dat)
df_series %>%
separate(period, into = c("tmp", "month"), sep = 1) %>%
filter(tmp == "M") %>%
select(-tmp, -footnote_codes) %>%
mutate(month = as.numeric(month),
date = make_date(year = year, month = month)) %>%
select(-year, -month) -> df_series
df_series %>%
separate(series_id,
into = c("tmp", "sa", "tmp2", "area", "series"),
sep = c(2,3,4,8)
) %>%
filter(area == "0000",
sa == "U") %>%
mutate(series = str_trim(series)) %>%
select(-tmp, -tmp2, -area, -sa) %>%
drop_na() -> df_series
raw_names <- read.table(file = "https://download.bls.gov/pub/time.series/cu/cu.item", sep = "\t", header=T, stringsAsFactors = F, quote = "")
df_names <- select(raw_names, item_code, item_name, display_level)
rm(raw_names)
df <- merge(df_series, df_names, by.x = "series", by.y = "item_code")
df <- rename(df, name = item_name)
transform_raw_weights <- function(raw_data)
{
df <- raw_data[seq(6, nrow(raw_data)), seq(1, 3)]
names(df) <- c("level", "name", "weight")
df %>%
mutate(level = factor(as.integer(level)),
weight = as.numeric(weight),
name = sapply(name, gsub, pattern = "\\(.\\)", replacement = ""),
name = sapply(name, gsub, pattern = "\\(..\\)", replacement = "")) %>%
filter(!is.na(weight)) -> df
return(df)
}
url <- "https://www.bls.gov/cpi/tables/supplemental-files/news-release-table2-202101.xlsx"
fn <- "cpi_weights.xlsx"
download.file(url = url , destfile = fn, mode = "wb")
raw_weights <- read_excel(path = fn)
file.remove(fn)
raw_weights %>%
transform_raw_weights() %>%
mutate(year = "2020") %>%
rename(weight_Dec = weight) %>%
select(-level)-> df_weights_Dec
url <- "https://www.bls.gov/cpi/tables/supplemental-files/news-release-table2-202001.xlsx"
fn <- "cpi_weights.xlsx"
download.file(url = url , destfile = fn, mode = "wb")
raw_weights <- read_excel(path = fn)
file.remove(fn)
raw_weights %>%
transform_raw_weights() %>%
mutate(year = "2019") %>%
rename(weight_Dec = weight) %>%
select(-level) %>%
rbind(df_weights_Dec) -> df_weights_Dec
df_weights <- data.frame()
# function to calculate ratio of index
ratio_of_index <- function(value, date, date1, date2)
return(value[which(date == date2)] / value[which(date == date1)])
dates <- seq(min(df$date), max(df$date), by = "month")
for (ind_d in seq(1, length(dates)))
{
d <- dates[ind_d]
d_base <- make_date(year = year(d) - 1, month = 12)
df_tmp <- merge(df, filter(df_weights_Dec, year == year(d_base)), by = "name")
df_tmp %>%
filter(name == "All items") %>%
summarise(change_all = ratio_of_index(value, date, d_base, d)) %>%
select(change_all) -> change_all
df_tmp %>%
filter(name != "All items") %>%
group_by(name, weight_Dec) %>%
summarise(change_series = ratio_of_index(value, date, d_base, d)) %>%
mutate(new_weight = change_series * weight_Dec,
new_weight_normalized = new_weight / change_all[1,1]) %>%
ungroup() %>%
select(name, weight = new_weight_normalized) %>%
mutate(date = d + months(1)) %>%
rbind(df_weights) -> df_weights
# add All items which was filtered out above
df_weights <- rbind(df_weights, data.frame(name = "All items", weight = 100, date = d + months(1)))
}
df <- merge(df, df_weights, by = c("name", "date"))
url <- "https://www.bls.gov/cpi/tables/supplemental-files/news-release-table2-202104.xlsx"
fn <- "cpi_weights.xlsx"
download.file(url = url , destfile = fn, mode = "wb")
raw_table2_apr2021 <- read_excel(path = fn)
file.remove(fn)
raw_table2_apr2021 %>%
transform_raw_weights() %>%
select(-weight) -> df_categories
df_categories$category <- "Goods"
start_food <- which(df_categories$name == "Food")
end_food <- which(df_categories$name == "Other food away from home")
df_categories$category[seq(start_food, end_food)] <- "Food"
start_energy <- which(df_categories$name == "Energy")
end_energy <- which(df_categories$name == "Utility (piped) gas service")
df_categories$category[seq(start_energy, end_energy)] <- "Energy"
start_services <- which(df_categories$name == "Services less energy services")
end_services <- which(df_categories$name == "Financial services")
df_categories$category[seq(start_services, end_services)] <- "Services"
df_categories$category[df_categories$name == "All items"] <- "Total"
df_categories$category[df_categories$name == "All items less food and energy"] <- "Total ex energy and food"
df <- merge(df, df_categories, by = "name")
df <- select(df, date, series, name, value, weight, category, level)
growth_rate <- function(x, dates, date1, date2)
#calculate growth rate of the CPI index between y1m1 and y2m2
{
ind1 <- which(dates == date1)
ind2 <- which(dates == date2)
return(x[ind2] / x[ind1] * 100 - 100)
}
rebase_index <- function(x, dates, date0)
# rebase index to 100 in y0m0
{
ind0 <- which(dates == date0)
return(x / x[ind0] * 100)
}
df %>%
filter(level == 3) %>%
group_by(name, weight, category) %>%
summarise(mm_apr21 = round(growth_rate(value, date, as_date("2021-03-01"), as_date("2021-04-01")), digits = 2)
) -> tmp %>%
mutate(mm_apr21_weighted = mm_apr21 * weight / 100) %>%
pivot_longer(cols = c("mm_apr21", "mm_apr21_weighted"), names_to = "variable", values_to = "value") -> df_plot
df %>%
filter(level == 3) %>%
group_by(name, weight, category) %>%
summarise(mm_apr21 = round(growth_rate(value, date, as_date("2021-03-01"), as_date("2021-04-01")), digits = 2)
) -> tmp
